<?xml version="1.0" encoding="utf-8"?><model><node name="Tests" testCount="(47 tests)" status="Success"><node name="Tests.Tests" testCount="(47 tests)" status="Success"><node name="CardCompareHelpersTests" testCount="(3 tests)" status="Success"><node name="GetHighestHandFromPlayers_ExpectedIsReturned_WhenPassingTwoDifferentHands" testCount="(3 tests)" status="Success"><node name="GetHighestHandFromPlayers_ExpectedIsReturned_WhenPassingTwoDifferentHands(handOne: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = HighCard, HighCard = Ace, Name = &quot;Bob&quot; }, handTwo: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = OnePair, HighCard = Ace, Name = &quot;Jim&quot; }, expectedPlayer: &quot;Jim&quot;)" status="Success" /><node name="GetHighestHandFromPlayers_ExpectedIsReturned_WhenPassingTwoDifferentHands(handOne: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = HighCard, HighCard = Jack, Name = &quot;Bob&quot; }, handTwo: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = HighCard, HighCard = Ace, Name = &quot;Jim&quot; }, expectedPlayer: &quot;Jim&quot;)" status="Success" /><node name="GetHighestHandFromPlayers_ExpectedIsReturned_WhenPassingTwoDifferentHands(handOne: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = OnePair, HighCard = Ace, Name = &quot;Bob&quot; }, handTwo: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = HighCard, HighCard = Ace, Name = &quot;Jim&quot; }, expectedPlayer: &quot;Bob&quot;)" status="Success" /></node></node><node name="HandTests" testCount="(30 tests)" status="Success"><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand" testCount="(18 tests)" status="Success"><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 2, expectedCardValue: Ace)" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 2, expectedCardValue: Ace) [2]" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 2, expectedCardValue: Ace) [3]" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 2, expectedCardValue: Ace) [4]" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 2, expectedCardValue: Ace) [5]" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 2, expectedCardValue: Ace) [6]" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 2, expectedCardValue: Ace) [7]" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 2, expectedCardValue: Ace) [8]" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 2, expectedCardValue: Ace) [9]" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 2, expectedCardValue: Ten)" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 2, expectedCardValue: Ten) [2]" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 3, expectedCardValue: Ten)" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 3, expectedCardValue: Ten) [2]" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 3, expectedCardValue: Ten) [3]" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 3, expectedCardValue: Ten) [4]" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 3, expectedCardValue: Ten) [5]" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 3, expectedCardValue: Ten) [6]" status="Success" /><node name="GetValuableDuplicateCardsByValue_HighMultipleValueIsReturned_FromHand(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, typeOfMultiple: 3, expectedCardValue: Ten) [7]" status="Success" /></node><node name="HighValueFlush_ReturnsExpected" testCount="(12 tests)" status="Success"><node name="HighValueFlush_ReturnsExpected(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, expectedResult: Ace)" status="Success" /><node name="HighValueFlush_ReturnsExpected(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, expectedResult: Ace) [2]" status="Success" /><node name="HighValueFlush_ReturnsExpected(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, expectedResult: Ace) [3]" status="Success" /><node name="HighValueFlush_ReturnsExpected(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, expectedResult: Ace) [4]" status="Success" /><node name="HighValueFlush_ReturnsExpected(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, expectedResult: Ace) [5]" status="Success" /><node name="HighValueFlush_ReturnsExpected(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, expectedResult: Empty)" status="Success" /><node name="HighValueFlush_ReturnsExpected(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, expectedResult: Empty) [2]" status="Success" /><node name="HighValueFlush_ReturnsExpected(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, expectedResult: Empty) [3]" status="Success" /><node name="HighValueFlush_ReturnsExpected(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, expectedResult: Empty) [4]" status="Success" /><node name="HighValueFlush_ReturnsExpected(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, expectedResult: Empty) [5]" status="Success" /><node name="HighValueFlush_ReturnsExpected(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, expectedResult: Empty) [6]" status="Success" /><node name="HighValueFlush_ReturnsExpected(hand: Hand { Cards = [Card { ... }, Card { ... }, Card { ... }, Card { ... }, Card { ... }] }, expectedResult: Empty) [7]" status="Success" /></node></node><node name="PlayerHandTests" testCount="(8 tests)" status="Success"><node name="EvaluatePlayerHand_SetsExpected" testCount="(8 tests)" status="Success"><node name="EvaluatePlayerHand_SetsExpected(playerHand: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = Flush, HighCard = Ace, Name = &quot;Test&quot; }, expectedValue: Flush, highValue: Ace)" status="Success" /><node name="EvaluatePlayerHand_SetsExpected(playerHand: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = Flush, HighCard = Nine, Name = &quot;Test&quot; }, expectedValue: Flush, highValue: Nine)" status="Success" /><node name="EvaluatePlayerHand_SetsExpected(playerHand: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = HighCard, HighCard = Ace, Name = &quot;Test&quot; }, expectedValue: HighCard, highValue: Ace)" status="Success" /><node name="EvaluatePlayerHand_SetsExpected(playerHand: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = HighCard, HighCard = Queen, Name = &quot;Test&quot; }, expectedValue: HighCard, highValue: Queen)" status="Success" /><node name="EvaluatePlayerHand_SetsExpected(playerHand: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = OnePair, HighCard = Jack, Name = &quot;Test&quot; }, expectedValue: OnePair, highValue: Jack)" status="Success" /><node name="EvaluatePlayerHand_SetsExpected(playerHand: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = OnePair, HighCard = Jack, Name = &quot;Test&quot; }, expectedValue: OnePair, highValue: Jack) [2]" status="Success" /><node name="EvaluatePlayerHand_SetsExpected(playerHand: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = ThreeOfKind, HighCard = Four, Name = &quot;Test&quot; }, expectedValue: ThreeOfKind, highValue: Four)" status="Success" /><node name="EvaluatePlayerHand_SetsExpected(playerHand: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = ThreeOfKind, HighCard = Seven, Name = &quot;Test&quot; }, expectedValue: ThreeOfKind, highValue: Seven)" status="Success" /></node></node><node name="PokerLogicTests" testCount="(6 tests)" status="Success"><node name="BreakTie_ReturnsExpectedWinner_WhenPassingPlayersList" testCount="(3 tests)" status="Success"><node name="BreakTie_ReturnsExpectedWinner_WhenPassingPlayersList(playerHands: [PlayerHand { Hand = Hand { ... }, HandValue = HighCard, HighCard = Queen, Name = &quot;Doug&quot; }, PlayerHand { Hand = Hand { ... }, HandValue = HighCard, HighCard = Queen, Name = &quot;Bob&quot; }], expectedWinner: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = HighCard, HighCard = Queen, Name = &quot;Doug&quot; })" status="Success" /><node name="BreakTie_ReturnsExpectedWinner_WhenPassingPlayersList(playerHands: [PlayerHand { Hand = Hand { ... }, HandValue = OnePair, HighCard = Jack, Name = &quot;Doug&quot; }, PlayerHand { Hand = Hand { ... }, HandValue = OnePair, HighCard = Jack, Name = &quot;Bob&quot; }], expectedWinner: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = OnePair, HighCard = Jack, Name = &quot;Bob&quot; })" status="Success" /><node name="BreakTie_ReturnsExpectedWinner_WhenPassingPlayersList(playerHands: [PlayerHand { Hand = Hand { ... }, HandValue = ThreeOfKind, HighCard = Four, Name = &quot;Doug&quot; }, PlayerHand { Hand = Hand { ... }, HandValue = ThreeOfKind, HighCard = Four, Name = &quot;Bob&quot; }], expectedWinner: PlayerHand { Hand = Hand { Cards = [...] }, HandValue = ThreeOfKind, HighCard = Four, Name = &quot;Doug&quot; })" status="Success" /></node><node name="BreakTie_ReturnsNull_WhenTotalStalemate" testCount="(3 tests)" status="Success"><node name="BreakTie_ReturnsNull_WhenTotalStalemate(playerHands: [PlayerHand { Hand = Hand { ... }, HandValue = HighCard, HighCard = Jack, Name = &quot;Doug&quot; }, PlayerHand { Hand = Hand { ... }, HandValue = HighCard, HighCard = Jack, Name = &quot;Bob&quot; }, PlayerHand { Hand = Hand { ... }, HandValue = HighCard, HighCard = Jack, Name = &quot;Steve&quot; }, PlayerHand { Hand = Hand { ... }, HandValue = HighCard, HighCard = Jack, Name = &quot;Jim&quot; }])" status="Success" /><node name="BreakTie_ReturnsNull_WhenTotalStalemate(playerHands: [PlayerHand { Hand = Hand { ... }, HandValue = HighCard, HighCard = Jack, Name = &quot;Doug&quot; }, PlayerHand { Hand = Hand { ... }, HandValue = HighCard, HighCard = Jack, Name = &quot;Bob&quot; }, PlayerHand { Hand = Hand { ... }, HandValue = HighCard, HighCard = Jack, Name = &quot;Steve&quot; }])" status="Success" /><node name="BreakTie_ReturnsNull_WhenTotalStalemate(playerHands: [PlayerHand { Hand = Hand { ... }, HandValue = HighCard, HighCard = Jack, Name = &quot;Doug&quot; }, PlayerHand { Hand = Hand { ... }, HandValue = HighCard, HighCard = Jack, Name = &quot;Bob&quot; }])" status="Success" /></node></node></node></node></model>